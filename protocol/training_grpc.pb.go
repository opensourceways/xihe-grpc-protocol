// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrainingClient is the client API for Training service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrainingClient interface {
	SetTrainingStatus(ctx context.Context, in *TrainingStatus, opts ...grpc.CallOption) (*Result, error)
	SetTrainingOutput(ctx context.Context, in *TrainingOutput, opts ...grpc.CallOption) (*Result, error)
	SetTrainingLogPath(ctx context.Context, in *TrainingLogPath, opts ...grpc.CallOption) (*Result, error)
}

type trainingClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainingClient(cc grpc.ClientConnInterface) TrainingClient {
	return &trainingClient{cc}
}

func (c *trainingClient) SetTrainingStatus(ctx context.Context, in *TrainingStatus, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/xiheInternal.Training/SetTrainingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingClient) SetTrainingOutput(ctx context.Context, in *TrainingOutput, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/xiheInternal.Training/SetTrainingOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingClient) SetTrainingLogPath(ctx context.Context, in *TrainingLogPath, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/xiheInternal.Training/SetTrainingLogPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingServer is the server API for Training service.
// All implementations must embed UnimplementedTrainingServer
// for forward compatibility
type TrainingServer interface {
	SetTrainingStatus(context.Context, *TrainingStatus) (*Result, error)
	SetTrainingOutput(context.Context, *TrainingOutput) (*Result, error)
	SetTrainingLogPath(context.Context, *TrainingLogPath) (*Result, error)
	mustEmbedUnimplementedTrainingServer()
}

// UnimplementedTrainingServer must be embedded to have forward compatible implementations.
type UnimplementedTrainingServer struct {
}

func (UnimplementedTrainingServer) SetTrainingStatus(context.Context, *TrainingStatus) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrainingStatus not implemented")
}
func (UnimplementedTrainingServer) SetTrainingOutput(context.Context, *TrainingOutput) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrainingOutput not implemented")
}
func (UnimplementedTrainingServer) SetTrainingLogPath(context.Context, *TrainingLogPath) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTrainingLogPath not implemented")
}
func (UnimplementedTrainingServer) mustEmbedUnimplementedTrainingServer() {}

// UnsafeTrainingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrainingServer will
// result in compilation errors.
type UnsafeTrainingServer interface {
	mustEmbedUnimplementedTrainingServer()
}

func RegisterTrainingServer(s grpc.ServiceRegistrar, srv TrainingServer) {
	s.RegisterService(&Training_ServiceDesc, srv)
}

func _Training_SetTrainingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServer).SetTrainingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xiheInternal.Training/SetTrainingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServer).SetTrainingStatus(ctx, req.(*TrainingStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Training_SetTrainingOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServer).SetTrainingOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xiheInternal.Training/SetTrainingOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServer).SetTrainingOutput(ctx, req.(*TrainingOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Training_SetTrainingLogPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingLogPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServer).SetTrainingLogPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xiheInternal.Training/SetTrainingLogPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServer).SetTrainingLogPath(ctx, req.(*TrainingLogPath))
	}
	return interceptor(ctx, in, info, handler)
}

// Training_ServiceDesc is the grpc.ServiceDesc for Training service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Training_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xiheInternal.Training",
	HandlerType: (*TrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTrainingStatus",
			Handler:    _Training_SetTrainingStatus_Handler,
		},
		{
			MethodName: "SetTrainingOutput",
			Handler:    _Training_SetTrainingOutput_Handler,
		},
		{
			MethodName: "SetTrainingLogPath",
			Handler:    _Training_SetTrainingLogPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "training.proto",
}
